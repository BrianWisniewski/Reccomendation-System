+--------------------------------+
|            <<class>>           |
|            Book                |
+--------------------------------+
| -title: std::string            |
| -totalRating: double           |
| -ratingCount: double           |
+--------------------------------+
| +Book(title: std::string)      |
| +getTitle(): std::string       |
| +addRating(rating: double)     |
| +getAverageRating(): double    |
+--------------------------------+

+--------------------------------+
|            <<class>>           |
|            User                |
+--------------------------------+
| -name: std::string             |
| -ratedBooks: std::map<const    |
|   Book*, double>               |
+--------------------------------+
| +User(name: std::string)       |
| +User(name: std::string,       |
|  books: std::vector<Book*>&)   |
| +getName(): std::string        |
| +addRatedBook(book: Book&,     |
|  rating: double)               |
| +getRating(book: const Book&): |
|  double                        |
+--------------------------------+

+------------------------------------------+
|            <<class>>                     |
|            BookRecommender               |
+------------------------------------------+
| -books: std::vector<Book*>               |
| -users: std::vector<User*>               |
+------------------------------------------+
| +BookRecommender()                       |
| +BookRecommender(filename:               |
|  const std::string&)                     |
| +addBook(title: std::string)             |
| +addUser(name: std::string): User*       |
| +loadData(filename: const std::string&): |
|  bool                                    |
| +printRecommend(userName: std::string)   |
|  const                                   |
| +printAverages() const                   |
| -similarity(recommender: User) const:    |
|  std::vector<std::pair<double,           |
|  std::string>>                           |
| -removeWhiteSpace(line: std::string):    |
|  std::string                             |
+------------------------------------------+


+------------------------------------------+
|            <<class>>                     |
|         BookRecommender                  |
+------------------------------------------+
| -books: vector<string bookTitle>         |
| -users: vector<string userName>          |
| -ratedBooks: map<string userName,        |
| vector<double> ratings                   |
| -averages: map<string bookTitle,         |
| double average>                          |
+------------------------------------------+
| +BookRecommender()                       |
| +BookRecommender(string fileName)        |
| +printRecommend(string userName)         |
| +printAverages()                         |
| +getAverage(string bookTitle) : double   |
| +getSimilarity(string userName1,         |
| string userName2) : double               |
| +getBookCount(): int                     |
| +getUserCount(): int                     |
| +getUserBookRating(string userName,      |
| string bookTitle) : double               |
| NOTE: there may be a few more methods    |
| added for unitTesting                    |
+------------------------------------------+

DATA MEMBERS

books - a vector that holds the name of all book titles (no duplicates)
users - a vector that holds the name of all users (no duplicates)
ratedBooks - a dictionary (map) that holds the books ratings for each user
averages - a dictionary (map) that holds the user ratings average for each book title

METHODS

BookRecommender - creates an object and initializes all of the data members 
    (they will not contain any data)
BookRecommender(string fileName) - creates an object and processes the data in 
    the specified file; initializes all data members as necessary given the data
void printRecommend(string userName) - displays the book recommendations for a 
    given user per the specifications given above
void printAverages() - displays the book average ratings per the specifications 
double getAverage(string bookTitle) - returns the average rating for a specified book
double getSimilarity(string userName1, string userName2) - returns the similarity 
    value for recommender userName1 compared to userName2 (in the example above, 
    userName1 would be Kalid and userName2 would be Carlos)
